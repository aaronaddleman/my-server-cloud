{
  "name": "openstack-common",
  "description": "Common OpenStack attributes, libraries and recipes.",
  "long_description": "Description\n===========\n\nThis cookbook provides common setup recipes, helper methods and attributes that describe an OpenStack deployment as part of the OpenStack reference deployment Chef for OpenStack.\n\nRequirements\n============\n\n* Chef 0.10.0 or higher required (for Chef environment use).\n\nCookbooks\n---------\n\nThe following cookbooks are dependencies:\n\n* apt\n* database\n* yum\n* yum-epel\n\nAttributes\n==========\n\nPlease see the extensive inline documentation in `attributes/*.rb` for descriptions\nof all the settable attributes for this cookbook.\n\nNote that all attributes are in the `default[\"openstack\"]` \"namespace\"\n\n* `openstack['api']['auth']['version']` - Select v2.0 or v3.0. Default v2.0. The default auth API version used by other components to interact with identity service.\n\ndefault\n-------\n\nSupport multiple network types. Default network type is \"nova\" with the other option supported being \"neutron\".\nThe attribute is in the `default[\"openstack\"][\"compute\"][\"network\"][\"service_type\"]`.\n\nRecipes\n=======\n\nclient\n----\n\nInstall the common python openstack client package\n\ndefault\n----\n\nInstalls/Configures common recipes\n\n```json\n\"run_list\": [\n    \"recipe[openstack-common]\"\n]\n```\n\nlogging\n----\n\nInstalls/Configures common logging\n\n```json\n\"run_list\": [\n    \"recipe[openstack-common::logging]\"\n]\n```\n\nset_endpoints_by_interface\n----\n\nIterates over the contents of the `node['openstack']['endpoints']` hash and\nfinds any occurrence of `bind_interface` to set the IP address\n(`node['openstack']['endpoints']['identity']['bind_interface'] = 'eth0'` for\nexample, overriding `node['openstack']['endpoints']['identity']['host']`). If\n`bind_interface` isn't set, the value of `host` is not modified.\n\n```json\n\"run_list\": [\n    \"recipe[openstack-common::set_endpoints_by_interface]\"\n]\n```\n\nopenrc\n----\n\nCreates an /root/openrc file. This requires the identity attributes for\nadmin_user and admin_tenant_name, or for the identity_service_chef_role\nto be used on the identity server node.\n\n\nsysctl\n----\n\nIterates over the contents of the `node['openstack']['sysctl']` hash and writes\nthe entries to `/etc/sysctl.d/60-openstack.conf`.\n\n```json\n\"run_list\": [\n    \"recipe[openstack-common::sysctl]\"\n]\n```\n\nData Bags\n=========\n\nThis cookbook containes Libraries to work with passwords and secrets in databags.   Databags can be unencrypted ( for dev ) or encrypted ( for prod ). In addition to traditionally encrypted data bags they can also be created as chef-vault items. To read more about chef-vault and how to use it, go to https://docs.getchef.com/chef_vault.html.\n\nDocumentation for Attributes for selecting databag format can be found in the attributes section of this cookbook.\n\nDocumentation for format of these Databags can be found in the [Openstack Chef Repo](https://github.com/openstack/openstack-chef-repo#databags) repository.\n\nLWRPs\n=====\n\nThis cookbook provides the openstack_common_database LWRP, which replaces the old database library function 'db_create_with_user'.\nWhen this coobook is included as dependency, this LWRP can be used to create databases needed by the openstack services.\n\n```ruby\ndepends 'openstack-common'\n```\n\n```ruby\nopenstack_common_database 'compute' do\n  service 'compute' # name_attribute\n  user 'nova'\n  pass 'supersecret'\nend\n```\n\nAn example of the usage can be seen here https://github.com/stackforge/cookbook-openstack-ops-database/blob/master/recipes/openstack-db.rb.\n\nLibraries\n=========\n\nThis cookbook exposes a set of default library routines:\n\n* `cli` -- Used to call openstack CLIs\n* `endpoint` -- Used to return a `::URI` object representing the named OpenStack endpoint\n* `admin_endpoint` -- Used to return a `::URI` object representing the named OpenStack admin endpoint if one was specified. Otherwise, it will return the same value as `endpoint`.\n* `internal_endpoint` -- Used to return a `::URI` object representing the named OpenStack internal endpoint if one was specified. Otherwise, it will return the same value as `endpoint`.\n* `public_endpoint` -- Used to return a `::URI` object representing the named OpenStack public endpoint if one was specified. Otherwise, it will return the same value as `endpoint`.\n* `endpoints` -- Useful for operating on all OpenStack endpoints\n* `db` -- Returns a Hash of information about a named OpenStack database\n* `db_uri` -- Returns the SQLAlchemy RFC-1738 DB URI (see: http://rfc.net/rfc1738.html) for a named OpenStack database\n* `secret` -- Returns the value of an encrypted data bag for a named OpenStack secret key and key-section\n* `get_password` -- Ease-of-use helper that returns the decrypted password for a named database, service or keystone user.\n* `matchers` -- A custom matcher(render_config_file) for testing ini format file section content by with_section_content.\n\nUsage\n-----\n\nThe following are code examples showing the above library routines in action.\nRemember when using the library routines exposed by this library to include\nthe Openstack routines in your recipe's `::Chef::Recipe` namespace, like so:\n\n```ruby\nclass ::Chef::Recipe\n  include ::Openstack\nend\n```\n\nExample of using the `endpoint` routine:\n\n```ruby\nnova_api_ep = endpoint \"compute-api\"\n::Chef::Log.info(\"Using Openstack Compute API endpoint at #{nova_api_ep.to_s}\")\n\n# Note that endpoint URIs may contain variable interpolation markers such\n# as `%(tenant_id)s`, so you may need to decode them. Do so like this:\n\nrequire \"uri\"\n\nputs ::URI.decode nova_api_ap.to_s\n```\n\nExample of using the `get_password` and `db_uri` routine:\n\n```ruby\ndb_pass = get_password \"db\" \"cinder\"\ndb_user = node[\"cinder\"][\"db\"][\"user\"]\nsql_connection = db_uri \"volume\", db_user, db_pass\n\ntemplate \"/etc/cinder/cinder.conf\" do\n  source \"cinder.conf.erb\"\n  owner  node[\"cinder\"][\"user\"]\n  group  node[\"cinder\"][\"group\"]\n  mode   00644\n  variables(\n    \"sql_connection\" => sql_connection\n  )\nend\n```\n\nURI Operations\n--------------\n\nUse the `Openstack::uri_from_hash` routine to helpfully return a `::URI::Generic`\nobject for a hash that contains any of the following keys:\n\n* `host`\n* `uri`\n* `port`\n* `path`\n* `scheme`\n\nIf the `uri` key is in the hash, that will be used as the URI, otherwise the URI will be\nconstructed from the various parts of the hash corresponding to the keys above.\n\n```ruby\n# Suppose node hash contains the following subhash in the :identity_service key:\n# {\n#   :host => 'identity.example.com',\n#   :port => 5000,\n#   :scheme => 'https'\n# }\nuri = ::Openstack::uri_from_hash(node[:identity_service])\n# uri.to_s would == \"https://identity.example.com:5000\"\n```\n\nThe routine will return nil if neither a `uri` or `host` key exists in the supplied hash.\n\nUsing the library without prefixing with ::Openstack\n----------------------------------------------------\n\nDon't like prefixing calls to the library's routines with `::Openstack`? Do this:\n\n```ruby\nclass ::Chef::Recipe\n  include ::Openstack\nend\n```\n\nin your recipe.\n\nTesting\n=====\n\nPlease refer to the [TESTING.md](TESTING.md) for instructions for testing the cookbook.\n\nBerkshelf\n=====\n\nBerks will resolve version requirements and dependencies on first run and\nstore these in Berksfile.lock. If new cookbooks become available you can run\n`berks update` to update the references in Berksfile.lock. Berksfile.lock will\nbe included in stable branches to provide a known good set of dependencies.\nBerksfile.lock will not be included in development branches to encourage\ndevelopment against the latest cookbooks.\n\nLicense and Author\n==================\n\n|                      |                                                    |\n|:---------------------|:---------------------------------------------------|\n| **Author**           |  Jay Pipes (<jaypipes@att.com>)                    |\n| **Author**           |  John Dewey (<jdewey@att.com>)                     |\n| **Author**           |  Matt Ray (<matt@opscode.com>)                     |\n| **Author**           |  Craig Tracey (<craigtracey@gmail.com>)            |\n| **Author**           |  Sean Gallagher (<sean.gallagher@att.com>)         |\n| **Author**           |  Ionut Artarisi (<iartarisi@suse.cz>)              |\n| **Author**           |  Chen Zhiwei (<zhiwchen@cn.ibm.com>)               |\n| **Author**           |  Brett Campbell (<brett.campbell@rackspace.com>)   |\n| **Author**           |  Mark Vanderwiel (<vanderwl@us.ibm.com>)           |\n|                      |                                                    |\n| **Copyright**        |  Copyright (c) 2012-2013, AT&T Services, Inc.      |\n| **Copyright**        |  Copyright (c) 2013, Opscode, Inc.                 |\n| **Copyright**        |  Copyright (c) 2013, Craig Tracey                  |\n| **Copyright**        |  Copyright (c) 2013-2014, SUSE Linux GmbH          |\n| **Copyright**        |  Copyright (c) 2013-2015, IBM, Corp.               |\n| **Copyright**        |  Copyright (c) 2013-2014, Rackspace US, Inc.       |\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "maintainer": "openstack-chef",
  "maintainer_email": "opscode-chef-openstack@googlegroups.com",
  "license": "Apache 2.0",
  "platforms": {
    "ubuntu": ">= 0.0.0",
    "suse": ">= 0.0.0",
    "redhat": ">= 0.0.0",
    "centos": ">= 0.0.0"
  },
  "dependencies": {
    "apt": "~> 2.6.1",
    "database": "~> 4.0.2",
    "mariadb": "~> 0.3.0",
    "mysql": "~> 6.0.13",
    "yum": "~> 3.5.4",
    "yum-epel": "~> 0.6.0",
    "galera": "~> 0.4.1"
  },
  "recommendations": {
  },
  "suggestions": {
  },
  "conflicting": {
  },
  "providing": {
  },
  "replacing": {
  },
  "attributes": {
  },
  "groupings": {
  },
  "recipes": {
    "openstack-common": "Installs/Configures common recipes",
    "openstack-common::set_endpoints_by_interface": "Set endpoints by interface",
    "openstack-common::logging": "Installs/Configures common logging",
    "openstack-common::sysctl": "Configures sysctl settings",
    "openstack-common::openrc": "Creates openrc file"
  },
  "version": "11.5.0",
  "source_url": "",
  "issues_url": ""
}